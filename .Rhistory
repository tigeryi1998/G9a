data.frame(
Contrast = name,
Rank = rank,
log2FC = fc,
padj = pval
)
)
}
return(gene_ranks)
}
print(get_gene_ranks("CA9", full_results))
print(get_gene_ranks("OAS2", full_results))
print(get_gene_ranks("EHMT2", full_results))
table(colData(dds)$group)
colData(dds)
colData(dds)$condition
View(dds)
dds@colData
plotCounts(dds, gene="EHMT2", intgroup="group")
plotCounts(dds, gene="EHMT2", intgroup="condition")
print(get_gene_ranks("EHMT2", full_results))
top_genes_by_contrast$KO_vs_WT
sum(sapply(top_genes_by_contrast, function(df) "EHMT2" %in% df$GeneName))
print(get_gene_ranks("EHMT2", full_results))
sum(sapply(top_genes_by_contrast, function(df) "EHMT2" %in% df$GeneName))
full_results$KO_vs_WT %>% head()
View(sig_df)
library(tidyr)
full_results$KO_vs_WT[:5]
full_results$KO_vs_WT
# KO vs WT down, then up in KO# vs KO
rescue <- function(
full_results,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
logfc_threshold = 0.5,
padj_threshold = 0.05,
direction_query = "negative",  # or "positive"
direction_keys = "positive"    # or "negative"
) {
# Helper to check if a gene name is valid (not NA or ENSG...)
is_valid_gene <- function(name) {
!is.na(name) && !grepl("^ENSG", name)
}
# Filter query contrast
query_df <- full_results[[query]]
query_df <- subset(
query_df,
is_valid_gene(GeneName) &
!is.na(padj) & padj < padj_threshold &
!is.na(log2FC) & (
if (direction_query == "negative") log2FC < -logfc_threshold else log2FC > logfc_threshold
)
)
# Start result with GeneName and log2FC from query
result <- data.frame(
GeneName = query_df$GeneName,
check.names = FALSE
)
result[[query]] <- query_df$log2FC
# Track matching key contrasts
matched_any_key <- rep(FALSE, nrow(result))
for (key in keys) {
key_df <- full_results[[key]]
key_df <- subset(
key_df,
is_valid_gene(GeneName) &
!is.na(padj) & padj < padj_threshold &
!is.na(log2FC) & (
if (direction_keys == "positive") log2FC > logfc_threshold else log2FC < -logfc_threshold
)
)
# Match gene names
log2fc_vals <- key_df$log2FC[match(result$GeneName, key_df$GeneName)]
result[[key]] <- log2fc_vals
# Mark if this key had a valid (non-NA) match
matched_any_key <- matched_any_key | !is.na(log2fc_vals)
}
# Keep genes with at least one matched key contrast
result <- result[matched_any_key, ]
return(result)
}
rescue_genes <- rescue(full_results,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
logfc_threshold = 0.5,
padj_threshold = 0.05,
direction_query = "negative",
direction_keys = "positive")
# KO vs WT down, then up in KO# vs KO
rescue <- function(
full_results,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
logfc_threshold = 0.5,
padj_threshold = 0.05,
direction_query = "negative",  # or "positive"
direction_keys = "positive"    # or "negative"
) {
# Vectorized helper to check if gene name is valid
is_valid_gene <- function(name) {
!is.na(name) & !grepl("^ENSG", name)
}
# Filter query contrast
query_df <- full_results[[query]]
query_df <- subset(
query_df,
is_valid_gene(GeneName) &
!is.na(padj) & padj < padj_threshold &
!is.na(log2FC) & (
if (direction_query == "negative") log2FC < -logfc_threshold else log2FC > logfc_threshold
)
)
# Start result with GeneName and log2FC from query
result <- data.frame(
GeneName = query_df$GeneName,
check.names = FALSE
)
result[[query]] <- query_df$log2FC
# Track matching key contrasts
matched_any_key <- rep(FALSE, nrow(result))
for (key in keys) {
key_df <- full_results[[key]]
key_df <- subset(
key_df,
is_valid_gene(GeneName) &
!is.na(padj) & padj < padj_threshold &
!is.na(log2FC) & (
if (direction_keys == "positive") log2FC > logfc_threshold else log2FC < -logfc_threshold
)
)
# Match gene names
log2fc_vals <- key_df$log2FC[match(result$GeneName, key_df$GeneName)]
result[[key]] <- log2fc_vals
# Mark if this key had a valid (non-NA) match
matched_any_key <- matched_any_key | !is.na(log2fc_vals)
}
# Keep genes with at least one matched key contrast
result <- result[matched_any_key, ]
return(result)
}
rescue_genes <- rescue(full_results,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
logfc_threshold = 0.5,
padj_threshold = 0.05,
direction_query = "negative",
direction_keys = "positive")
rescue_genes
View(rescue_genes)
View(rescue_genes)
rescue_genes <- rescue(full_results,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
logfc_threshold = 0.1,
padj_threshold = 0.05,
direction_query = "negative",
direction_keys = "positive")
View(rescue_genes)
rescue_genes <- rescue(full_results,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
logfc_threshold = 1.0,
padj_threshold = 0.05,
direction_query = "negative",
direction_keys = "positive")
View(rescue_genes)
rescue_genes$GeneName
rescue_genes
rescue_genes <- rescue(full_results,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
logfc_threshold = 2.0,
padj_threshold = 0.05,
direction_query = "negative",
direction_keys = "positive")
rescue_genes %>% head()
head(rescue_genes)
rescue_genes
rescue_genes <- rescue(full_results,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
logfc_threshold = 3.0,
padj_threshold = 0.05,
direction_query = "negative",
direction_keys = "positive")
head(rescue_genes)
rescue_genes
rescue_genes <- rescue(full_results,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
logfc_threshold = 4.0,
padj_threshold = 0.05,
direction_query = "negative",
direction_keys = "positive")
head(rescue_genes)
rescue_genes <- rescue(full_results,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
logfc_threshold = 4.0,
padj_threshold = 0.05,
direction_query = "negative",
direction_keys = "positive")
(rescue_genes)
rescue_genes <- rescue(full_results,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
logfc_threshold = 5.0,
padj_threshold = 0.05,
direction_query = "negative",
direction_keys = "positive")
print(rescue_genes, row.names = FALSE)
write.csv(rescue_genes, file = "rescue.csv", row.names = FALSE)
View(rescue_genes)
library(dplyr)
print(rescue_genes, row.names = FALSE)
rescue_genes$GeneName
View(rescue_genes)
write.csv(rescue_genes, file = "rescue.csv", row.names = FALSE)
lfc_subset
genes_to_label
lfc_results %>% head()
signature_genes <- read.csv("signatures.csv")
signature_genes
signature_genes <- unique(signature_genes$Gene)
signature_genes
signature_genes <- read.csv("signatures.csv")
signature_genes_name <- unique(signature_genes$Gene)
signature_genes
signature_genes_name
lfc_sig <- lfc_results %>% filter(GeneName %in% signature_genes_name)
lfc_sig
signature_genes
View(lfc_sig)
lfc_sig
lfc_sig <- left_join(lfc_sig, signature_genes, by = c("GeneName" = "Gene"))
lfc_sig
signature_genes <- read.csv("signatures.csv")
signature_genes_name <- unique(signature_genes$Gene)
signature_genes_name
lfc_sig <- lfc_results %>% filter(GeneName %in% signature_genes_name)
lfc_sig
rescue_genes
lfc_sig
signature_genes_name
lfc_sig
lfc_signature <- lfc_results %>% filter(GeneName %in% signature_genes_name)
lfc_signature
rescue_signature <- rescue(lfc_signature,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
query_log2fc_threshold = 1.0,
key_log2fc_threshold = 1.0,
padj_threshold = 0.05,
is_query_down = TRUE,  # TRUE if query wants negative log2fc
is_key_down = FALSE    # FALSE if key wants positive log2fc
)
# KO vs WT down, then up in KO# vs KO
rescue <- function(
full_results,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
query_log2fc_threshold = 1.0,
key_log2fc_threshold=1.0,
padj_threshold = 0.05,
is_query_down = TRUE,  # TRUE if query wants negative log2fc
is_key_down = FALSE    # FALSE if key wants positive log2fc
) {
# Vectorized helper to check if gene name is valid
is_valid_gene <- function(name) {
!is.na(name) & !grepl("^ENSG", name)
}
# Filter query contrast
query_df <- full_results[[query]]
query_df <- subset(
query_df,
is_valid_gene(GeneName) &
!is.na(padj) & padj < padj_threshold &
!is.na(log2FC) & (
if (is_query_down == TRUE) log2FC < -query_log2fc_threshold else log2FC > query_log2fc_threshold
)
)
# Start result with GeneName and log2FC from query
result <- data.frame(
GeneName = query_df$GeneName,
check.names = FALSE
)
result[[query]] <- query_df$log2FC
# Track matching key contrasts
matched_any_key <- rep(FALSE, nrow(result))
for (key in keys) {
key_df <- full_results[[key]]
key_df <- subset(
key_df,
is_valid_gene(GeneName) &
!is.na(padj) & padj < padj_threshold &
!is.na(log2FC) & (
if (is_key_down == FALSE) log2FC > key_log2fc_threshold else log2FC < -key_log2fc_threshold
)
)
# Match gene names
log2fc_vals <- key_df$log2FC[match(result$GeneName, key_df$GeneName)]
result[[key]] <- log2fc_vals
# Mark if this key had a valid (non-NA) match
matched_any_key <- matched_any_key | !is.na(log2fc_vals)
}
# Keep genes with at least one matched key contrast
result <- result[matched_any_key, ]
return(result)
}
rescue_genes <- rescue(full_results,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
query_log2fc_threshold = 5.0,
key_log2fc_threshold = 5.0,
padj_threshold = 0.05,
is_query_down = TRUE,  # TRUE if query wants negative log2fc
is_key_down = FALSE    # FALSE if key wants positive log2fc
)
print(rescue_genes, row.names = FALSE)
# signature genes
signature_genes <- read.csv("signatures.csv")
signature_genes_name <- unique(signature_genes$Gene)
lfc_signature <- lfc_results %>% filter(GeneName %in% signature_genes_name)
rescue_signature <- rescue(lfc_signature,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
query_log2fc_threshold = 1.0,
key_log2fc_threshold = 1.0,
padj_threshold = 0.05,
is_query_down = TRUE,  # TRUE if query wants negative log2fc
is_key_down = FALSE    # FALSE if key wants positive log2fc
)
lfc_signature
full_results
lfc_signature$KO_vs_WT
full_results$KO_vs_WT
lfc_signature
lfc_signature
full_results$KO_vs_WT %>% head()
lfc_signature %>% head()
signature_list <- lapply(full_result, function(df) {
subset(df, GeneName %in% signature_genes_name)
})
signature_list <- lapply(full_results, function(df) {
subset(df, GeneName %in% signature_genes_name)
})
signature_list$KO_vs_WT
signature_list$KO1_vs_KO
rescue_signature <- rescue(signature_list,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
query_log2fc_threshold = 1.0,
key_log2fc_threshold = 1.0,
padj_threshold = 0.05,
is_query_down = TRUE,  # TRUE if query wants negative log2fc
is_key_down = FALSE    # FALSE if key wants positive log2fc
)
print(rescue_signature, row.names = FALSE)
signature_list$KO_vs_WT
rescue_signature <- rescue(signature_list,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
query_log2fc_threshold = 0.5,
key_log2fc_threshold = 0.5,
padj_threshold = 0.05,
is_query_down = TRUE,  # TRUE if query wants negative log2fc
is_key_down = FALSE    # FALSE if key wants positive log2fc
)
print(rescue_signature, row.names = FALSE)
signature_list$KO_vs_WT
rescue_signature <- rescue(signature_list,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
query_log2fc_threshold = 0.5,
key_log2fc_threshold = 0.5,
padj_threshold = 0.05,
is_query_down = FALSE,  # TRUE if query wants negative log2fc
is_key_down = FALSE    # FALSE if key wants positive log2fc
)
print(rescue_signature, row.names = FALSE)
rescue_signature <- rescue(signature_list,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
query_log2fc_threshold = 0.5,
key_log2fc_threshold = 0.5,
padj_threshold = 0.05,
is_query_down = TRUE,  # TRUE if query wants negative log2fc
is_key_down = FALSE    # FALSE if key wants positive log2fc
)
print(rescue_signature, row.names = FALSE)
lfc_signature
rescue_signature <- rescue(signature_list,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
query_log2fc_threshold = 0.5,
key_log2fc_threshold = 0.5,
padj_threshold = 0.05,
is_query_down = FALSE,  # TRUE if query wants negative log2fc
is_key_down = TRUE    # FALSE if key wants positive log2fc
)
print(rescue_signature, row.names = FALSE)
rescue_signature <- rescue(signature_list,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
query_log2fc_threshold = 0.5,
key_log2fc_threshold = 0.5,
padj_threshold = 0.05,
is_query_down = FALSE,  # TRUE if query wants negative log2fc
is_key_down = FALSE    # FALSE if key wants positive log2fc
)
print(rescue_signature, row.names = FALSE)
rescue_signature <- rescue(signature_list,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
query_log2fc_threshold = 0.5,
key_log2fc_threshold = 0.5,
padj_threshold = 0.05,
is_query_down = TRUE,  # TRUE if query wants negative log2fc
is_key_down = TRUE    # FALSE if key wants positive log2fc
)
print(rescue_signature, row.names = FALSE)
rescue_signature <- rescue(signature_list,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
query_log2fc_threshold = 0.5,
key_log2fc_threshold = 0.5,
padj_threshold = 0.05,
is_query_down = TRUE,  # TRUE if query wants negative log2fc
is_key_down = FALSE    # FALSE if key wants positive log2fc
)
print(rescue_signature, row.names = FALSE)
rescue_signature <- rescue(signature_list,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
query_log2fc_threshold = 1.0,
key_log2fc_threshold = 0.5,
padj_threshold = 0.05,
is_query_down = TRUE,  # TRUE if query wants negative log2fc
is_key_down = FALSE    # FALSE if key wants positive log2fc
)
print(rescue_signature, row.names = FALSE)
rescue_signature <- rescue(signature_list,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
query_log2fc_threshold = 1.0,
key_log2fc_threshold = 0.5,
padj_threshold = 0.05,
is_query_down = FALSE,  # TRUE if query wants negative log2fc
is_key_down = TRUE    # FALSE if key wants positive log2fc
)
print(rescue_signature, row.names = FALSE)
rescue_signature <- rescue(signature_list,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
query_log2fc_threshold = 0.5,
key_log2fc_threshold = 0.5,
padj_threshold = 0.05,
is_query_down = FALSE,  # TRUE if query wants negative log2fc
is_key_down = TRUE    # FALSE if key wants positive log2fc
)
print(rescue_signature, row.names = FALSE)
rescue_signature <- rescue(signature_list,
query = "KO_vs_WT",
keys = c("KO1_vs_KO", "KO2_vs_KO", "KO3_vs_KO", "KO4_vs_KO"),
query_log2fc_threshold = 0.5,
key_log2fc_threshold = 0.5,
padj_threshold = 0.05,
is_query_down = TRUE,  # TRUE if query wants negative log2fc
is_key_down = FALSE    # FALSE if key wants positive log2fc
)
print(rescue_signature, row.names = FALSE)
View(rescue_genes)
View(signature_genes)
print(rescue_signature, row.names = FALSE)
signature_genes_name
lfc_signature
signature_genes_name
# signature genes
signature_genes <- read.csv("signatures.csv")
signature_genes_name <- unique(signature_genes$Gene)
top10_var_genes
signature_genes_name
# Heat Map
library(pheatmap)
# Extract matrix of log2FC values
lfc_mat <- as.matrix(lfc_viz[, -(1:2)])
rownames(lfc_mat) <- lfc_viz$GeneName  # or use GeneID
# Compute variance across each gene
gene_vars <- apply(lfc_mat, 1, var)
# Select top 10 variable genes
top10_var_genes <- names(sort(gene_vars, decreasing = TRUE))[1:10]
# Add EHMT2 if not already in top10
genes_to_label <- unique(c(top10_var_genes, "EHMT2", signature_genes_name))
# Create vector of row labels: only label selected genes, blank for others
row_labels <- ifelse(rownames(lfc_mat) %in% genes_to_label, rownames(lfc_mat), "")
# Plot heatmap
gg4 <- pheatmap::pheatmap(lfc_mat,
cluster_rows = TRUE,
cluster_cols = TRUE,
labels_row = row_labels,          # selectively label
fontsize_row = 6,
fontsize_col = 10,
color = colorRampPalette(c("blue", "white", "red"))(100),
breaks = seq(-5, 5, length.out = 101),  # symmetric color scale around 0
main = "Heatmap of log2 Fold Changes (EHMT2 + Top 10 Variable Genes)",
filename = "Heatmap_log2FC.png",     # ✅ Save directly here
width = 10,
height = 15
)
# Subset lfc_results by GeneName
lfc_subset <- lfc_results[lfc_results$GeneName %in% genes_to_label, ]
